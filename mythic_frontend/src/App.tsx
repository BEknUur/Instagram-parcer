import { useState } from 'react'
import './App.css'

interface InstagramData {
  success: boolean;
  runId: string;
  username: string;
  url: string;
  message: string;
  data: any[];
  stats: {
    total_items: number;
    profile_data: number;
    posts_with_comments: number;
    processing_time_seconds: number;
  };
}

interface ProfileInfo {
  username: string;
  fullName: string;
  biography: string;
  followersCount: number;
  followsCount: number;
  postsCount: number;
  verified: boolean;
  private: boolean;
  profilePicUrl: string;
}

interface PostCaption {
  text: string;
  timestamp: string;
  likesCount: number;
  commentsCount: number;
}

function App() {
  const [username, setUsername] = useState('')
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState<InstagramData | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [showJson, setShowJson] = useState(false)
  const [showCaptions, setShowCaptions] = useState(true)
  const [showProfile, setShowProfile] = useState(true)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!username.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username')
      return
    }

    setLoading(true)
    setError(null)
    setResult(null)

    try {
      // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
      const cleanUsername = username.replace('@', '').trim()
      const instagramUrl = `https://www.instagram.com/${cleanUsername}/`
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
      const response = await fetch(
        `http://localhost:8001/start-scrape?url=${encodeURIComponent(instagramUrl)}&username=${encodeURIComponent(cleanUsername)}`
      )
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`)
      }
      
      const data = await response.json()
      setResult(data)
      
    } catch (err: any) {
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö')
    } finally {
      setLoading(false)
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
  const extractProfileInfo = (data: any[]): ProfileInfo | null => {
    if (!data || data.length === 0) return null
    const profileData = data[0]
    return {
      username: profileData.username || '',
      fullName: profileData.fullName || '',
      biography: profileData.biography || '',
      followersCount: profileData.followersCount || 0,
      followsCount: profileData.followsCount || 0,
      postsCount: profileData.postsCount || 0,
      verified: profileData.verified || false,
      private: profileData.private || false,
      profilePicUrl: profileData.profilePicUrl || ''
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤
  const extractCaptions = (data: any[]): PostCaption[] => {
    const captions: PostCaption[] = []
    data.forEach(item => {
      if (item.latestPosts && Array.isArray(item.latestPosts)) {
        item.latestPosts.forEach((post: any) => {
          if (post.caption) {
            captions.push({
              text: post.caption,
              timestamp: post.timestamp || '',
              likesCount: post.likesCount || 0,
              commentsCount: post.commentsCount || 0
            })
          }
        })
      }
    })
    return captions
  }

  return (
    <div className="container">
      <h1>Instagram Parser</h1>
      <p className="subtitle">–ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è Instagram</p>
      
      <form onSubmit={handleSubmit} className="form">
        <div className="input-group">
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            placeholder="@username"
            className="input"
            disabled={loading}
          />
          <button type="submit" className="button" disabled={loading}>
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
          </button>
        </div>
      </form>

      {error && (
        <div className="error">
          ‚ùå {error}
        </div>
      )}

      {loading && (
        <div className="loading">
          <div className="spinner"></div>
          <p>–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</p>
        </div>
      )}

      {result && (
        <div className="results">
          <div className="stats">
            <h2>‚úÖ {result.message}</h2>
            <div className="stats-grid">
              <div className="stat-item">
                <span className="stat-label">Username:</span>
                <span className="stat-value">{result.username}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</span>
                <span className="stat-value">{result.stats.total_items}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">Run ID:</span>
                <span className="stat-value">{result.runId}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</span>
                <span className="stat-value">{result.stats.processing_time_seconds}—Å</span>
              </div>
            </div>
          </div>

          {/* –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ */}
          {(() => {
            const profile = extractProfileInfo(result.data)
            return profile && (
              <div className="profile-section">
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
                  <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</h3>
                  <button 
                    onClick={() => setShowProfile(!showProfile)}
                    style={{ padding: '0.5rem 1rem', fontSize: '0.9rem' }}
                  >
                    {showProfile ? 'üîº –°–∫—Ä—ã—Ç—å' : 'üîΩ –ü–æ–∫–∞–∑–∞—Ç—å'}
                  </button>
                </div>
                {showProfile && (
                  <div className="profile-info">
                    {profile.profilePicUrl && (
                      <div className="profile-pic">
                        <img src={profile.profilePicUrl} alt={profile.username} />
                      </div>
                    )}
                    <div className="profile-details">
                      <div className="profile-row">
                        <span className="profile-label">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
                        <span className="profile-value">@{profile.username} {profile.verified && '‚úì'}</span>
                      </div>
                      <div className="profile-row">
                        <span className="profile-label">–ü–æ–ª–Ω–æ–µ –∏–º—è:</span>
                        <span className="profile-value">{profile.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                      </div>
                      {profile.biography && (
                        <div className="profile-row">
                          <span className="profile-label">–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</span>
                          <p className="profile-bio">{profile.biography}</p>
                        </div>
                      )}
                      <div className="profile-stats">
                        <div className="profile-stat">
                          <span className="stat-number">{profile.postsCount.toLocaleString()}</span>
                          <span className="stat-text">–ü–æ—Å—Ç–æ–≤</span>
                        </div>
                        <div className="profile-stat">
                          <span className="stat-number">{profile.followersCount.toLocaleString()}</span>
                          <span className="stat-text">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
                        </div>
                        <div className="profile-stat">
                          <span className="stat-number">{profile.followsCount.toLocaleString()}</span>
                          <span className="stat-text">–ü–æ–¥–ø–∏—Å–æ–∫</span>
                        </div>
                      </div>
                      {profile.private && (
                        <div className="profile-badge">üîí –ó–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å</div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            )
          })()}

          {/* –¢–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤ */}
          {(() => {
            const captions = extractCaptions(result.data)
            return captions.length > 0 && (
              <div className="captions-section">
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
                  <h3>üìù –¢–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤ ({captions.length})</h3>
                  <button 
                    onClick={() => setShowCaptions(!showCaptions)}
                    style={{ padding: '0.5rem 1rem', fontSize: '0.9rem' }}
                  >
                    {showCaptions ? 'üîº –°–∫—Ä—ã—Ç—å' : 'üîΩ –ü–æ–∫–∞–∑–∞—Ç—å'}
                  </button>
                </div>
                {showCaptions && (
                  <div className="captions-list">
                    {captions.map((caption, index) => (
                      <div key={index} className="caption-card">
                        <div className="caption-header">
                          <span className="caption-number">–ü–æ—Å—Ç #{index + 1}</span>
                          <span className="caption-date">
                            {caption.timestamp ? new Date(caption.timestamp).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}
                          </span>
                        </div>
                        <p className="caption-text">{caption.text}</p>
                        <div className="caption-stats">
                          <span>‚ù§Ô∏è {caption.likesCount.toLocaleString()}</span>
                          <span>üí¨ {caption.commentsCount.toLocaleString()}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )
          })()}

          <div className="json-section">
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
              <h3>üìã JSON –¥–∞–Ω–Ω—ã–µ (—Å—ã—Ä—ã–µ)</h3>
              <button 
                onClick={() => setShowJson(!showJson)}
                style={{ padding: '0.5rem 1rem', fontSize: '0.9rem' }}
              >
                {showJson ? 'üîº –°–∫—Ä—ã—Ç—å JSON' : 'üîΩ –ü–æ–∫–∞–∑–∞—Ç—å JSON'}
              </button>
            </div>
            {showJson && (
              <pre className="json-output">
                {JSON.stringify(result.data, null, 2)}
              </pre>
            )}
          </div>

          {result.data && result.data.length > 0 && (
            <div className="images-section">
              <h3>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h3>
              <div className="images-grid">
                {result.data.map((item: any, index: number) => {
                  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                  const photos: any[] = [];
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º latestPosts
                  if (item.latestPosts && Array.isArray(item.latestPosts)) {
                    item.latestPosts.forEach((post: any) => {
                      if (post.displayUrl) {
                        photos.push({
                          url: post.displayUrl,
                          caption: post.caption || '',
                          type: 'post'
                        });
                      }
                    });
                  }
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º ownerLatestPosts (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)
                  if (item.ownerLatestPosts && Array.isArray(item.ownerLatestPosts)) {
                    item.ownerLatestPosts.forEach((post: any) => {
                      if (post.displayUrl) {
                        photos.push({
                          url: post.displayUrl,
                          caption: post.caption || '',
                          type: 'post'
                        });
                      }
                    });
                  }
                  
                  return photos.map((photo, photoIndex) => (
                    <div key={`${index}-${photoIndex}`} className="image-card">
                      <img 
                        src={photo.url} 
                        alt={`Photo ${photoIndex + 1}`}
                        loading="lazy"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.style.display = 'none';
                        }}
                      />
                      {photo.caption && (
                        <p className="image-caption">
                          {photo.caption.length > 150 
                            ? photo.caption.substring(0, 150) + '...' 
                            : photo.caption}
                        </p>
                      )}
                    </div>
                  ));
                })}
              </div>
              {result.data.every((item: any) => 
                (!item.latestPosts || item.latestPosts.length === 0) && 
                (!item.ownerLatestPosts || item.ownerLatestPosts.length === 0)
              ) && (
                <div className="no-images">
                  <p>üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</p>
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  )
}

export default App
